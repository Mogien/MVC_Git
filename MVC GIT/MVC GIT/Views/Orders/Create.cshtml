@model MVC_GIT.Models.OrdersDTO

@{
    ViewBag.Title = "Create Order";
}
<div style="margin-top: 10px;" class="row">
    <div class="col">
        @Html.ActionLink("Back to List", "Index")
    </div>
    <div class="col">
        <h2>Create Order</h2>
    </div>
</div>
@using (Html.BeginForm("Create", "Orders", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <hr />
    <div class="form-horizontal" style="width:100%;">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div style="padding: 20px;">
            <div class="form-group">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.No, "Order number", htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.No, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter order number", id = "orderNumber" } })
                        @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(model => model.OrderDate, "Order date", htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control", @type="date" } })
                        @Html.ValidationMessageFor(model => model.No, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(model => model.OrderName, "Order name", htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.OrderName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter order name", id = "orderName" } })
                        @Html.ValidationMessageFor(model => model.OrderName, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-4">
                    @Html.LabelFor(model => model.CustomerId, "Customer name", htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.DropDownList("CustomerId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4">
                    @Html.LabelFor(model => model.Amount, "Amount", htmlAttributes: new { @class = "control-label" })
                    <div>
                        @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter amount", id = "orderAmount" } })
                        @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group" style="float: right; margin-top: 10px">
                <div class="col-md-4">
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </div>
        </div>
    </div>

    
}


@section scripts {
    <script>
        $(document).ready(function () {
            $(':input[type="submit"]').prop('disabled', true);
            $('input[type="text"]').keyup(function () {
                if ($("#orderNumber").val() != '' && $("#orderName").val() != '' && $("#orderAmount").val() != '') {
                    $(':input[type="submit"]').prop('disabled', false);
                } else {
                    $(':input[type="submit"]').prop('disabled', true);
                }
            });
        });
        $('#orderAmount').keyup(function () {
            var val = $(this).val();
            if (isNaN(val)) {
                val = val.replace(/[^0-9\.]/g, '');
                if (val.split('.').length > 2)
                    val = val.replace(/\.+$/, "");
            }
            $(this).val(val);
        });
    </script>
}